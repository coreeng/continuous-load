---
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: k6
  labels:
    app.kubernetes.io/name: k6
    app.kubernetes.io/component: continuous-load
spec:
  schedule: "*/6 * * * *" # Every 6 minutes
  successfulJobsHistoryLimit: 5
  failedJobsHistoryLimit: 5
  startingDeadlineSeconds: 60
  concurrencyPolicy: Allow
  jobTemplate:
    metadata:
      name: k6
      labels:
        app.kubernetes.io/name: k6
        app.kubernetes.io/component: continuous-load
    spec:
      completions: 2
      parallelism: 2
      backoffLimit: 0 
      template:
        metadata:
          name: k6
          labels:
            app.kubernetes.io/name: k6
            app.kubernetes.io/component: continuous-load
          annotations:
            proxy.istio.io/config: '{ "holdApplicationUntilProxyStarts": true }'
        spec:
          activeDeadlineSeconds: 600 # job runs 7 min cleanup after 10 min
          securityContext:
            fsGroup: 1000
            runAsGroup: 1000
            runAsUser: 1000
          containers:
            - name: k6
              image: loadimpact/k6:0.32.0
              env:
                - name: K6_STATSD_ENABLE_TAGS
                  value: "true"
                - name: K6_DATADOG_ADDR
                  value: "127.0.0.1:9125"
                - name: K6_OUT
                  value: datadog
                - name: LOAD_TARGET_INGRESS
                  value: "{{ .Values.loadTargetIngress }}" 
                - name: LOAD_TARGET_SERVICE
                  value: "{{ .Values.loadTargetService }}" 
                - name: K6_NO_USAGE_REPORT
                  value: "true"
              command: [ "sh", "-c", "k6 run /scripts/load.js; exit_code=$?; echo exit_code is $exit_code; wget --post-data '' http://127.0.0.1:15020/quitquitquit || true; exit $exit_code;"]
              resources:
                requests:
                  cpu: 100m
                  memory: 200Mi
                limits:
                  memory: 200Mi
              volumeMounts:
                - name: scripts-vol
                  mountPath: /scripts
            - name: prometheus-statsd-exporter
              securityContext:
                {}
              image: "prom/statsd-exporter:v0.20.0"
              imagePullPolicy: IfNotPresent
              args:
                - --web.listen-address=:9102
                - --web.telemetry-path=/metrics
                - --statsd.listen-udp=:9125
                - --statsd.listen-tcp=:9125
                - --statsd.cache-size=1000
                - --statsd.event-queue-size=10000
                - --statsd.event-flush-threshold=1000
                - --statsd.event-flush-interval=200ms
                - --statsd.mapping-config=/etc/prometheus-statsd-exporter/statsd-mapping.conf
              resources:
                requests:
                  cpu: 100m
                  memory: 50Mi
                limits:
                  memory: 50Mi
              ports:
                - name: http
                  containerPort: 9102
                  protocol: TCP
                - name: statsd-tcp
                  containerPort: 9125
                  protocol: TCP
                - name: statsd-udp
                  containerPort: 9125
                  protocol: UDP
              livenessProbe:
                httpGet:
                  path: /metrics
                  port: http
              readinessProbe:
                httpGet:
                  path: /metrics
                  port: http
              resources:
                {}
              volumeMounts:
                - name: statsd-mapping-config
                  mountPath: /etc/prometheus-statsd-exporter
          restartPolicy: Never
          affinity:
            podAntiAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                - labelSelector:
                    matchExpressions:
                      - key: app.kubernetes.io/name
                        operator: In
                        values:
                          - k6
                  topologyKey: kubernetes.io/hostname
          volumes:
            - name: scripts-vol
              configMap:
                name: k6
            - name: statsd-mapping-config
              configMap:
                name: statsd-config
                items:
                  - key: statsd.mappingConf
                    path: statsd-mapping.conf